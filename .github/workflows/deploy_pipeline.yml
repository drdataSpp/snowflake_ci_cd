name: Deploy data pipeline

on:
  push:
    branches:
      - master                # Trigger only on the master branch
    paths:
      - snowflake_resources/**  # Trigger only when changes are in the snowflake_resources folder

  pull_request:
    types:                    # Specify PR events to trigger the workflow
      - opened
      - reopened
      - ready_for_review
      - synchronize           # When new commits are pushed to the PR
    paths:
      - snowflake_resources/**  # Trigger only when changes are in the snowflake_resources folder

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REPO_NAME: "GITHUB.SNOWFLAKE_GIT.SNOWFLAKE_REPO"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch or PR base branch
        id: branch_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Extract the base branch from the PR event
            echo "PR base branch: ${{ github.base_ref }}"
            echo "branch_name=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            # Extract the branch name for a push event
            branch_name=${GITHUB_REF#refs/heads/}
            echo "Branch name is: $branch_name"
            echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          fi

      - name: Set environment and Snowflake account based on branch or PR
        id: determine_env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Event is a pull request. Deploying to TEST environment."
            ENV="TEST"
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT_TEST }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_USER=${{ secrets.SNOWFLAKE_USER_TEST }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD_TEST }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "Event is a push to master. Deploying to PROD environment."
            ENV="PROD"
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT_PROD }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_USER=${{ secrets.SNOWFLAKE_USER_PROD }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD_PROD }}" >> $GITHUB_ENV
          else
            echo "Unexpected event or branch. Skipping deployment."
            exit 1
          fi
          echo "Environment set to: $ENV"
          echo "ENV=$ENV" >> $GITHUB_ENV

      - name: Get list of changed files
        id: changed_files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, compare the base and head of the PR
            git fetch origin ${{ github.base_ref }}
            git fetch origin ${{ github.head_ref }}
            echo "Comparing ${{ github.base_ref }} to ${{ github.head_ref }}"
            git diff --name-only --diff-filter=ACMR origin/${{ github.base_ref }}...origin/${{ github.head_ref }} > changed_files.txt
          else
            # For pushes, compare with the previous commit
            git fetch --depth=2 origin ${{ github.ref }}
            echo "Comparing with previous commit"
            git diff --name-only --diff-filter=ACMR HEAD^ HEAD > changed_files.txt
          fi
      
          echo "Changed files:"
          cat changed_files.txt
      
          changed_files=$(cat changed_files.txt | grep '\.sql$' | tr '\n' ' ')
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT

      - name: Install Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: ".snowflake/config.toml"

      - name: Fetch repository changes in Snowflake
        run: snow git fetch "${REPO_NAME}"

      - name: Execute Snowflake SQL scripts in order
        if: steps.changed_files.outputs.changed_files != ''
        run: |
          echo "Processing changed files: ${{ steps.changed_files.outputs.changed_files }}"
          echo "Using environment: ${{ env.ENV }}"
          declare -a execution_order=("snowflake_resources/database" "snowflake_resources/schema" "snowflake_resources/table")
          for level in "${execution_order[@]}"; do
            echo "Processing changes in $level"
            for file in ${{ steps.changed_files.outputs.changed_files }}; do
              if [[ $file == $level* && $file == *.sql ]]; then
                echo "Executing SQL script: $file"
                full_repo_path="@$REPO_NAME/branches/${{ steps.branch_info.outputs.branch_name }}/$file"
                echo "Executing on repo path: $full_repo_path"
                snow git execute "$full_repo_path"
              else
                echo "Skipping non-SQL file or file not in $level: $file"
              fi
            done
          done
