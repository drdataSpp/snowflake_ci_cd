name: Deploy data pipeline

on:
  push:
    branches:
      - master                # Trigger only on the master branch
    paths:
      - snowflake_resources/**  # Trigger only when changes are in the snowflake_resources folder

  pull_request:
    types:                    # Specify PR events to trigger the workflow
      - opened
      - reopened
      - ready_for_review
      - synchronize           # When new commits are pushed to the PR
    paths:
      - snowflake_resources/**  # Trigger only when changes are in the snowflake_resources folder

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  snowflake-ci-cd:
    runs-on: ubuntu-latest
    permissions: write-all

    # Add this condition to skip the job for manual deployment branches
    if: |
      !startsWith(github.head_ref, 'snowflake-manual-deployment-') &&
      !startsWith(github.ref, 'refs/heads/snowflake-manual-deployment-')

    env:
      REPO_NAME: "GITHUB.SNOWFLAKE_GIT.SNOWFLAKE_REPO"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch or PR base branch
        id: branch_info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Extract the base branch from the PR event
            echo "PR base branch: ${{ github.base_ref }}"
            echo "branch_name=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            # Extract the branch name for a push event
            branch_name=${GITHUB_REF#refs/heads/}
            echo "Branch name is: $branch_name"
            echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          fi

      - name: Set environment and Snowflake account based on branch or PR
        id: determine_env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Event is a pull request. Deploying to TEST environment."
            ENV="TEST"
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT_TEST }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_USER=${{ secrets.SNOWFLAKE_USER_TEST }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD_TEST }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "Event is a push to master. Deploying to PROD environment."
            ENV="PROD"
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT=${{ secrets.SNOWFLAKE_ACCOUNT_PROD }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_USER=${{ secrets.SNOWFLAKE_USER_PROD }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD=${{ secrets.SNOWFLAKE_PASSWORD_PROD }}" >> $GITHUB_ENV
          else
            echo "Unexpected event or branch. Skipping deployment."
            exit 1
          fi
          echo "Environment set to: $ENV"
          echo "ENV=$ENV" >> $GITHUB_ENV

      - name: Get list of changed files
        id: changed_files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, compare the base and head of the PR
            git fetch origin ${{ github.base_ref }}
            git fetch origin ${{ github.head_ref }}
            echo "Comparing ${{ github.base_ref }} to ${{ github.head_ref }}"
            git diff --name-only --diff-filter=ACMR origin/${{ github.base_ref }}...origin/${{ github.head_ref }} > changed_files.txt
          else
            # For pushes, compare with the previous commit
            git fetch --depth=2 origin ${{ github.ref }}
            echo "Comparing with previous commit"
            git diff --name-only --diff-filter=ACMR HEAD^ HEAD > changed_files.txt
          fi
      
          echo "Changed files:"
          cat changed_files.txt
      
          changed_files=$(cat changed_files.txt | grep '\.sql$' | tr '\n' ' ')
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT

      - name: Install Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: ".snowflake/config.toml"

      - name: Fetch repository changes in Snowflake
        run: snow git fetch "${REPO_NAME}"

      - name: Execute Snowflake SQL scripts in order
        id: execute_scripts
        if: steps.changed_files.outputs.changed_files != ''
        run: |
          set +e  # Continue execution even if a command fails
          echo "Processing changed files: ${{ steps.changed_files.outputs.changed_files }}"
          echo "Using environment: ${{ env.ENV }}"
          declare -a execution_order=("snowflake_resources/01_backup_deletes" "snowflake_resources/database" "snowflake_resources/schema" "snowflake_resources/table")
          deployed_files=""
          failed_files=""
          for level in "${execution_order[@]}"; do
            echo "Processing changes in $level"
            for file in ${{ steps.changed_files.outputs.changed_files }}; do
              if [[ $file == $level* && $file == *.sql ]]; then
                echo "Executing SQL script: $file"
                if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                  branch_name="${{ github.head_ref }}"
                else
                  branch_name="master"
                fi
                full_repo_path="@$REPO_NAME/branches/$branch_name/$file"
                echo "Executing on repo path: $full_repo_path"
                if snow git execute "$full_repo_path"; then
                  deployed_files+="$file "
                else
                  failed_files+="$file "
                  echo "Failed to execute $file"
                fi
              else
                echo "Skipping non-SQL file or file not in $level: $file"
              fi
            done
          done
          echo "deployed_files=$deployed_files" >> $GITHUB_OUTPUT
          echo "failed_files=$failed_files" >> $GITHUB_OUTPUT
          if [[ -n "$failed_files" ]]; then
            exit 1
          fi

      - name: Post Snowflake CI/CD Deployment Status
        if: always() && env.ENV == 'TEST'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const deployedFiles = '${{ steps.execute_scripts.outputs.deployed_files }}'.trim().split(' ').filter(Boolean);
            const failedFiles = '${{ steps.execute_scripts.outputs.failed_files }}'.trim().split(' ').filter(Boolean);
            const env = '${{ env.ENV }}';
            const status = '${{ job.status }}';
            
            let message = `üöÄüöÄ **Deployment to ${env} environment** üöÄüöÄ\n\n`;
            
            if (deployedFiles.length > 0) {
              message += `Successfully deployed files:\n`;
              message += deployedFiles.length > 1 ? deployedFiles.map(file => `- ${file}`).join('\n') : deployedFiles[0];
              message += '\n\n';
            }
            
            if (failedFiles.length > 0) {
              message += `Failed to deploy files:\n`;
              message += failedFiles.length > 1 ? failedFiles.map(file => `- ${file}`).join('\n') : failedFiles[0];
              message += '\n\n';
            }
            
            message += `Deployment status: **${status}** ${status.toLowerCase() === 'success' ? '‚úÖüòé' : '‚ùåüòê'}`;
            
            if (failedFiles.length > 0) {
              message += '\n\n‚ö†Ô∏è Error details: SQL compilation error in file(s). Please check the workflow logs for more information.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
      